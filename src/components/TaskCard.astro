---
export interface Props {
  number: number;
  title: string;
  description: string;
  actions: string[];
  imageUrl?: string;
  location?: string;
}

const { number, title, description, actions, imageUrl, location } = Astro.props;
---

<div class="task-card relative bg-white/10 backdrop-blur-md rounded-3xl p-6 mb-6 overflow-hidden transition-all duration-300 hover:bg-white/15 hover:scale-[1.02]">
  <!-- Gradient border effect -->
  <div class="absolute inset-0 rounded-3xl bg-gradient-to-r from-purple-500/20 to-pink-500/20 blur-xl -z-10"></div>
  
  <!-- Card content -->
  <div class="relative z-10">
    <!-- Task number -->
    <div class="task-number absolute -top-2 -right-2 text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-violet-500 opacity-50">
      {number.toString().padStart(2, '0')}
    </div>
    
    <!-- Location hint (if provided) -->
    {location && (
      <div class="mb-4 text-sm text-purple-300 flex items-center gap-2">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
        <span>{location}</span>
      </div>
    )}
    
    <!-- Task title -->
    <h3 class="text-2xl font-display font-bold text-white mb-3 pr-12">
      {title}
    </h3>
    
    <!-- Task description -->
    <p class="text-gray-300 mb-4 leading-relaxed">
      {description}
    </p>
    
    <!-- Image hint (if provided) -->
    {imageUrl && (
      <div class="mb-4 rounded-xl overflow-hidden h-32 bg-gray-800/50">
        <img 
          src={imageUrl} 
          alt={`Hint for ${title}`}
          class="w-full h-full object-cover opacity-70 hover:opacity-100 transition-opacity"
        />
      </div>
    )}
    
    <!-- Action items -->
    {actions.length > 0 && (
      <div class="space-y-2">
        <h4 class="text-sm font-semibold text-purple-300 uppercase tracking-wider">Actions:</h4>
        <ul class="space-y-1">
          {actions.map((action) => (
            <li class="flex items-start gap-2 text-sm text-gray-400">
              <span class="text-purple-400 mt-1">â€¢</span>
              <span>{action}</span>
            </li>
          ))}
        </ul>
      </div>
    )}
    
    <!-- Progress indicator -->
    <div class="mt-4 h-1 bg-gray-700/50 rounded-full overflow-hidden">
      <div class="h-full bg-gradient-to-r from-purple-500 to-pink-500 rounded-full w-0 task-progress"></div>
    </div>
  </div>
</div>

<style>
  .task-card {
    /* Ensure backdrop filter works */
    -webkit-backdrop-filter: blur(12px);
    backdrop-filter: blur(12px);
  }
  
  /* Animation for card appearance */
  .task-card {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Stagger animation delay */
  .task-card:nth-child(1) { animation-delay: 0.1s; }
  .task-card:nth-child(2) { animation-delay: 0.2s; }
  .task-card:nth-child(3) { animation-delay: 0.3s; }
  .task-card:nth-child(4) { animation-delay: 0.4s; }
  .task-card:nth-child(5) { animation-delay: 0.5s; }
</style>